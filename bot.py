import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram import F
import asyncio
from pymongo import MongoClient
from datetime import datetime, timedelta
import logging
import json
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = "7643886458:AAGr6E4H3HlkkU7jSZncXUGP8e_t-O04RNc"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# URI –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
uri = "mongodb+srv://mvstarcorp:UFnERtzkd9fwvqzm@cluster0.ihw7m.mongodb.net/?retryWrites=true&w=majority&tlsAllowInvalidCertificates=True"
client = MongoClient(uri)
database = client.get_database("Yoga_bot")
basic_collection = database.get_collection("basic_clstr")
subs_collection = database.get_collection("subs_clstr")

# –°—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
IMAGES = {
    "main": "https://i.imgur.com/q7Fgkhh.jpg",
    "group_practice": "https://i.imgur.com/5WWAIIc.jpg",
    "individual_practice": "https://i.imgur.com/EAXcUvg.jpg",
    "trial_practice": "https://i.imgur.com/ls7d2Ua.jpg",
    "results": "https://i.imgur.com/Rd4o7X4.jpg",
    "feedback": "https://i.imgur.com/HuPLLJ2.jpg",
    "tariff": "https://i.imgur.com/1PU75Nz.jpg",
}

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤
ADDITIONAL_PHOTOS = [
    "https://i.imgur.com/Gx6JnPF.jpg",
    "https://i.imgur.com/yTU7d3w.jpg",
    "https://i.imgur.com/kTfWNM3.jpg",
    "https://i.imgur.com/9kQ7axR.jpg",
    "https://i.imgur.com/JrYfCgH.jpg"
]

# –ú–µ–Ω—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤
def results_menu_markup():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–ê–ó–ê–î", callback_data="main_menu")],
        [InlineKeyboardButton(text="–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data="main_menu")]
    ])

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ì–†–£–ü–ü–û–í–´–ï –ü–†–ê–ö–¢–ò–ö–ò", callback_data="group_practice")],
        [InlineKeyboardButton(text="–ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ï –ü–†–ê–ö–¢–ò–ö–ò", callback_data="individual_practice")],
        [InlineKeyboardButton(text="–ü–†–û–ë–ù–ê–Ø –ü–†–ê–ö–¢–ò–ö–ê", callback_data="trial_practice")],
        [InlineKeyboardButton(text="–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò –û–¢–ó–´–í–´", callback_data="results")],
        [InlineKeyboardButton(text="–û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨", callback_data="feedback")]
    ])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_user_to_db(user_id, username, date):
    if basic_collection.count_documents({"user_id": user_id}) == 0:
        basic_collection.insert_one({"user_id": user_id, "username": username, "date": date})
        logging.info(f"User {username} added to the basic_clstr database.")
    else:
        logging.info(f"User {username} already exists in the basic_clstr database.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ subs_clstr –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
def add_user_to_subs_clstr(user_id, subscription_days):
    start_date = datetime.now()
    end_date = start_date + timedelta(days=subscription_days)
    subs_collection.insert_one({"user_id": user_id, "start_date": start_date, "end_date": end_date})
    logging.info(f"User {user_id} added to the subs_clstr database with subscription end date {end_date}.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
async def send_delayed_message(user_id):
    await asyncio.sleep(300)  # 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç
    if basic_collection.count_documents({"user_id": user_id}) > 0 and subs_collection.count_documents({"user_id": user_id}) == 0:
        await bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í–∏–∂—É —Ç—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞—Å—å –±–æ—Ç–æ–º! –í —á–µ–º –≤–æ–ø—Ä–æ—Å?")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    add_user_to_db(user_id, username, date)

    await message.answer_photo(
        IMAGES["main"],
        caption="–ü—Ä–∏–≤–µ—Ç! \n\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –î–∞—à–∞, —è —Ç—Ä–µ–Ω–µ—Ä –ø–æ –π–æ–≥–µ —Å –æ–ø—ã—Ç–æ–º –±–æ–ª–µ–µ 4 –ª–µ—Ç. –ï—Å–ª–∏ —Ç—ã —É—Å—Ç–∞–ª –æ—Ç –±–æ–ª–µ–π –≤ —Å–ø–∏–Ω–µ, —Å—Ç—Ä–µ—Å—Å–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏, —Ç—ã –ø—Ä–∏—à–µ–ª –ø–æ –∞–¥—Ä–µ—Å—É!\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n‚ú® –ò–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –±–æ–ª–µ–π –≤ —Ç–µ–ª–µ –∏ —É–ª—É—á—à–∏—Ç—å –æ—Å–∞–Ω–∫—É\n‚ú® –û–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ\n‚ú® –ü–æ–¥–Ω—è—Ç—å —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Å–Ω—è—Ç—å —Å—Ç—Ä–µ—Å—Å, –¥–∞–∂–µ –µ—Å–ª–∏ —É —Ç–µ–±—è –æ—á–µ–Ω—å –ø–ª–æ—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫.\n\n–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –≤—Å–µ –æ –º–æ–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö, —Ç–∞—Ä–∏—Ñ–∞—Ö –∏ —É—Å–ª–æ–≤–∏—è—Ö. –ì–æ—Ç–æ–≤ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–µ —Ç–µ–ª–æ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏ –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –∑–¥–æ—Ä–æ–≤—å—é!",
        reply_markup=main_menu()
    )

    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    asyncio.create_task(send_delayed_message(user_id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–†–£–ü–ü–û–í–´–ï –ü–†–ê–ö–¢–ò–ö–ò"
@dp.callback_query(F.data == "group_practice")
async def group_practice_menu(callback_query: types.CallbackQuery):
    await callback_query.message.edit_media(
        types.InputMediaPhoto(media=IMAGES["group_practice"], caption="ü´Ç–ì—Ä—É–ø–ø–æ–≤—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏\n\n‚ú® –ü—Ä–∞–∫—Ç–∏–∫–∏ –≤ –ø—Ä—è–º—ã—Ö —ç—Ñ–∏—Ä–∞—Ö 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é. –í–¢–û–†–ù–ò–ö, –ü–Ø–¢–ù–ò–¶–ê 8.00 –ú–°–ö\n\n‚ú® –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∞–∫—Ç–∏–∫–∏ - 60 –º–∏–Ω—É—Ç.\n\n‚ú® –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ. –¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è, –≤—ã–±–∏—Ä–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º.\n\n‚ú® –ü—Ä–∞–∫—Ç–∏–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª–µ –∏–¥—É—Ç –æ—Ç –ª–µ–≥–∫–∏—Ö –∫ —Å–ª–æ–∂–Ω—ã–º, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ —Å–ø–æ–∫–æ–π–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –¥–∞–∂–µ –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –æ–ø—ã—Ç–∞ –≤ –π–æ–≥–µ."),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–¢–ê–†–ò–§ –ò –û–ü–õ–ê–¢–ê", callback_data="tariff_group")],
            [InlineKeyboardButton(text="–ù–ê–ó–ê–î", callback_data="main_menu")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ï –ü–†–ê–ö–¢–ò–ö–ò"
@dp.callback_query(F.data == "individual_practice")
async def individual_practice_menu(callback_query: types.CallbackQuery):
    await callback_query.message.edit_media(
        types.InputMediaPhoto(media=IMAGES["individual_practice"], caption="üßòüßòüèª‚Äç‚ôÄÔ∏è–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏\n\n- –í—Ä–µ–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π –ø–æ–¥–±–∏—Ä–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –ø–æ–¥ –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –æ—Ç 60 –º–∏–Ω—É—Ç\n- –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –ø–æ–¥ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ó–∞ —Å—á–µ—Ç —ç—Ç–æ–≥–æ –∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–∞–∫–æ–π –±—ã—Å—Ç—Ä—ã–π —Ä–æ—Å—Ç –≤ –ø—Ä–∞–∫—Ç–∏–∫–µ.\n\nüåû–£–∂–µ —á–µ—Ä–µ–∑ 1-3 –º–µ—Å—è—Ü–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫ –≤—ã –ø–æ—á—É–≤—Å—Ç–≤—É–µ—Ç–µ:\n- –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ –±–æ–ª–µ–µ —è—Å–Ω—ã–π —É–º –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏.\n- –£–ª—É—á—à–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è, —É–º–µ–Ω—å—à–µ–Ω–∏–µ –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç–∞ –≤ —Å–ø–∏–Ω–µ –∏ —Å—É—Å—Ç–∞–≤–∞—Ö.\n- –õ–µ–≥—á–µ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ä–∞–±–æ—á–∏–º–∏ –∏ –ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏, –±—ã—Å—Ç—Ä–µ–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è."),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–¢–ê–†–ò–§ –ò –û–ü–õ–ê–¢–ê", callback_data="tariff_individual")],
            [InlineKeyboardButton(text="–ù–ê–ó–ê–î", callback_data="main_menu")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–†–û–ë–ù–ê–Ø –ü–†–ê–ö–¢–ò–ö–ê"
@dp.callback_query(F.data == "trial_practice")
async def trial_practice_menu(callback_query: types.CallbackQuery):
    await callback_query.message.edit_media(
        types.InputMediaPhoto(media=IMAGES["trial_practice"], caption="–ü–æ–ø—Ä–æ–±–æ–≤–∞–≤, —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ —Ç–µ—Ä—è–µ—à—å, –∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—à—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å.\n\n–ü–æ—Å–ª–µ –ø—Ä–æ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –æ —Å–≤–æ–∏—Ö –æ—â—É—â–µ–Ω–∏—è—Ö @dariakobrina.\n\n–ë—É–¥—É —Ç–µ–±–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞ü§ç"),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–û–õ–£–ß–ò–¢–¨ –ü–†–û–ë–ù–£–Æ –ü–†–ê–ö–¢–ò–ö–£", url="https://youtu.be/ej-qJBF3jCQ?si=jMRDHDRvSrUZxfod")],
            [InlineKeyboardButton(text="–ù–ê–ó–ê–î", callback_data="main_menu")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò –û–¢–ó–´–í–´"
@dp.callback_query(F.data == "results")
async def results_menu(callback_query: types.CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    for photo in ADDITIONAL_PHOTOS:
        await callback_query.message.answer_photo(photo=photo)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    results_message = await callback_query.message.answer_photo(
        photo=IMAGES["results"],
        caption="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ—Ç–∑—ã–≤—ã –º–æ–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤.",
        reply_markup=results_menu_markup()
    )

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    results_message_id = results_message.message_id

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback_query.message.edit_media(
        types.InputMediaPhoto(media=IMAGES["results"], caption="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ—Ç–∑—ã–≤—ã –º–æ–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤."),
        reply_markup=results_menu_markup()
    )

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ message_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    dp.current_state(user=callback_query.from_user.id).update_data(results_message_id=results_message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–ê–ó–ê–î" –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤
@dp.callback_query(F.data.startswith("results:"))
async def results_back_menu(callback_query: types.CallbackQuery):
    state = dp.current_state(user=callback_query.from_user.id)
    data = await state.get_data()
    message_id = data.get("results_message_id")

    if message_id:
        await bot.edit_message_media(
            chat_id=callback_query.message.chat.id,
            message_id=message_id,
            media=types.InputMediaPhoto(media=IMAGES["main"], caption="–ü—Ä–∏–≤–µ—Ç! \n\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –î–∞—à–∞, —è —Ç—Ä–µ–Ω–µ—Ä –ø–æ –π–æ–≥–µ —Å –æ–ø—ã—Ç–æ–º –±–æ–ª–µ–µ 4 –ª–µ—Ç. –ï—Å–ª–∏ —Ç—ã —É—Å—Ç–∞–ª –æ—Ç –±–æ–ª–µ–π –≤ —Å–ø–∏–Ω–µ, —Å—Ç—Ä–µ—Å—Å–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏, —Ç—ã –ø—Ä–∏—à–µ–ª –ø–æ –∞–¥—Ä–µ—Å—É!\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n‚ú® –ò–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –±–æ–ª–µ–π –≤ —Ç–µ–ª–µ –∏ —É–ª—É—á—à–∏—Ç—å –æ—Å–∞–Ω–∫—É\n‚ú® –û–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ\n‚ú® –ü–æ–¥–Ω—è—Ç—å —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Å–Ω—è—Ç—å —Å—Ç—Ä–µ—Å—Å, –¥–∞–∂–µ –µ—Å–ª–∏ —É —Ç–µ–±—è –æ—á–µ–Ω—å –ø–ª–æ—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫.\n\n–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –≤—Å–µ –æ –º–æ–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö, —Ç–∞—Ä–∏—Ñ–∞—Ö –∏ —É—Å–ª–æ–≤–∏—è—Ö. –ì–æ—Ç–æ–≤ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–µ —Ç–µ–ª–æ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏ –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –∑–¥–æ—Ä–æ–≤—å—é!"),
            reply_markup=main_menu()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨"
@dp.callback_query(F.data == "feedback")
async def feedback_menu(callback_query: types.CallbackQuery):
    await callback_query.message.edit_media(
        types.InputMediaPhoto(media=IMAGES["feedback"], caption="–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ @dariakobrina."),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–ê–ó–ê–î", callback_data="main_menu")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–ê–†–ò–§ –ò –û–ü–õ–ê–¢–ê" –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫
@dp.callback_query(F.data == "tariff_group")
async def tariff_group_menu(callback_query: types.CallbackQuery):
    await callback_query.message.edit_media(
        types.InputMediaPhoto(media=IMAGES["tariff"], caption="–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –Ω—É–∂–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏:\n\n–ü–û–î–ü–ò–°–ö–ê 1 –ú–ï–°–Ø–¶ - 2.450 ‚ÇΩ.\n–ü–û–î–ü–ò–°–ö–ê 3 –ú–ï–°–Ø–¶–ê - 6.835 ‚ÇΩ.\n–ü–û–î–ü–ò–°–ö–ê 6 –ú–ï–°–Ø–¶–ï–í 12.495 ‚ÇΩ.\n\nüí≥ –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ª—é–±–æ–π –∫–∞—Ä—Ç–æ–π –†–§ –±–∞–Ω–∫–∞ –∏–ª–∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞.\n\nüí±–¢–∞–∫ –∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π (USDT). –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–π —Å–º–æ—Ç—Ä–∏—Ç–µ –¥–∞–ª–µ–µ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–û–ü–õ–ê–¢–ò–¢–¨ –ö–†–ò–ü–¢–û–ô¬ª."),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–ü–õ–ê–¢–ê", callback_data="payment_group")],
            [InlineKeyboardButton(text="–ù–ê–ó–ê–î", callback_data="group_practice")],
            [InlineKeyboardButton(text="–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data="main_menu")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–ü–õ–ê–¢–ò–¢–¨" –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫
@dp.callback_query(F.data == "payment_group")
async def payment_group_menu(callback_query: types.CallbackQuery):
    await callback_query.message.edit_media(
        types.InputMediaPhoto(media=IMAGES["tariff"], caption="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É"),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–û–î–ü–ò–°–ö–ê 1 –ú–ï–°–Ø–¶", callback_data="subscription_30")],
            [InlineKeyboardButton(text="–ü–û–î–ü–ò–°–ö–ê 3 –ú–ï–°–Ø–¶–ê", callback_data="subscription_90")],
            [InlineKeyboardButton(text="–ü–û–î–ü–ò–°–ö–ê 6 –ú–ï–°–Ø–¶–ï–í", callback_data="subscription_180")],
            [InlineKeyboardButton(text="–û–ü–õ–ê–¢–ò–¢–¨ –ö–†–ò–ü–¢–û–ô", callback_data="payment_crypto")],
            [InlineKeyboardButton(text="–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data="main_menu")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–ü–õ–ê–¢–ò–¢–¨ –ö–†–ò–ü–¢–û–ô" –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫
@dp.callback_query(F.data == "payment_crypto")
async def payment_crypto_menu(callback_query: types.CallbackQuery):
    await callback_query.message.edit_media(
        types.InputMediaPhoto(media=IMAGES["tariff"], caption="–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ USDT:\n\n–ü–û–î–ü–ò–°–ö–ê 1 –ú–ï–°–Ø–¶ - 24$\n–ü–û–î–ü–ò–°–ö–ê 3 –ú–ï–°–Ø–¶–ê - 68$\n–ü–û–î–ü–ò–°–ö–ê 6 –ú–ï–°–Ø–¶–ï–í - 124$\n\n–°–µ—Ç—å - TRC 20\nTMrL9Yk1Mse7yLAbKdqeTC8DztwRhr9Ptk\n\n–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞. –ü–µ—Ä–µ–¥ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç—ã —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞.\n\n–ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω-—à–æ—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω-—à–æ—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–ü–õ–ê–¢–ò–õ(–ê) - –û–¢–ü–†–ê–í–ò–¢–¨ –°–ö–†–ò–ù", url="https://t.me/dariakobrina")],
            [InlineKeyboardButton(text="–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data="main_menu")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–ê–†–ò–§ –ò –û–ü–õ–ê–¢–ê" –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫
@dp.callback_query(F.data == "tariff_individual")
async def tariff_individual_menu(callback_query: types.CallbackQuery):
    await callback_query.message.edit_media(
        types.InputMediaPhoto(media=IMAGES["tariff"], caption="üí≤–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:\n\n–û–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ - 3.000‚ÇΩ.\n–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ –º–µ—Å—è—Ü (8 –ø—Ä–∞–∫—Ç–∏–∫) - 24.000 ‚ÇΩ.\n\nüí±Crypto (USDT)\n\n–û–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ - 30$\n–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ –º–µ—Å—è—Ü (8 –ø—Ä–∞–∫—Ç–∏–∫) - 240$\n\nüí≥ –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ª—é–±–æ–π –∫–∞—Ä—Ç–æ–π –†–§ –±–∞–Ω–∫–∞.\n\nüí±–¢–∞–∫ –∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π (USDT).\n\n–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ó–ê–ü–ò–°–ê–¢–¨–°–Ø –ù–ê –ü–†–ê–ö–¢–ò–ö–£¬ª –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ."),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ó–ê–ü–ò–°–ê–¢–¨–°–Ø –ù–ê –ü–†–ê–ö–¢–ò–ö–£", url="https://t.me/dariakobrina")],
            [InlineKeyboardButton(text="–ù–ê–ó–ê–î", callback_data="individual_practice")],
            [InlineKeyboardButton(text="–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data="main_menu")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
@dp.callback_query(F.data.startswith("subscription_"))
async def handle_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    subscription_days = int(callback_query.data.split("_")[1])
    add_user_to_subs_clstr(user_id, subscription_days)
    await callback_query.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É.")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
    await bot.send_message(user_id, "–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: https://t.me/+UtAKtXuubOdlNWQy")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–ê–ó–ê–î"
@dp.callback_query(F.data == "main_menu")
async def main_menu_handler(callback_query: types.CallbackQuery):
    await callback_query.message.edit_media(
        types.InputMediaPhoto(media=IMAGES["main"], caption="–ü—Ä–∏–≤–µ—Ç! \n\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –î–∞—à–∞, —è —Ç—Ä–µ–Ω–µ—Ä –ø–æ –π–æ–≥–µ —Å –æ–ø—ã—Ç–æ–º –±–æ–ª–µ–µ 4 –ª–µ—Ç. –ï—Å–ª–∏ —Ç—ã —É—Å—Ç–∞–ª –æ—Ç –±–æ–ª–µ–π –≤ —Å–ø–∏–Ω–µ, —Å—Ç—Ä–µ—Å—Å–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏, —Ç—ã –ø—Ä–∏—à–µ–ª –ø–æ –∞–¥—Ä–µ—Å—É!\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n‚ú® –ò–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –±–æ–ª–µ–π –≤ —Ç–µ–ª–µ –∏ —É–ª—É—á—à–∏—Ç—å –æ—Å–∞–Ω–∫—É\n‚ú® –û–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ\n‚ú® –ü–æ–¥–Ω—è—Ç—å —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Å–Ω—è—Ç—å —Å—Ç—Ä–µ—Å—Å, –¥–∞–∂–µ –µ—Å–ª–∏ —É —Ç–µ–±—è –æ—á–µ–Ω—å –ø–ª–æ—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫.\n\n–í —ç—Ç–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –≤—Å–µ –æ –º–æ–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö, —Ç–∞—Ä–∏—Ñ–∞—Ö –∏ —É—Å–ª–æ–≤–∏—è—Ö. –ì–æ—Ç–æ–≤ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–µ —Ç–µ–ª–æ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏ –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –∑–¥–æ—Ä–æ–≤—å—é!"),
        reply_markup=main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –æ—Ç Prodamus
async def handle_webhook(request):
    data = await request.json()
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
        signature = request.headers.get("X-Signature")
        if signature != "37bc20c9d78758f336c5777b955ece74733e7fc31d42132c965d92f7f78c6f51":
            logging.error("Invalid signature")
            return web.Response(status=403)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞
        payment_data = json.loads(data)
        user_id = payment_data["user_id"]
        subscription_days = payment_data["subscription_days"]

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        add_user_to_subs_clstr(user_id, subscription_days)

        logging.info(f"User {user_id} subscription updated to {subscription_days} days")
        return web.Response(status=200)
    except Exception as e:
        logging.error(f"Error processing payment: {e}")
        return web.Response(status=500)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    dp.startup.register(lambda: print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"))
    dp.message.register(send_welcome)
    dp.callback_query.register(group_practice_menu, F.data == "group_practice")
    dp.callback_query.register(individual_practice_menu, F.data == "individual_practice")
    dp.callback_query.register(trial_practice_menu, F.data == "trial_practice")
    dp.callback_query.register(results_menu, F.data == "results")
    dp.callback_query.register(feedback_menu, F.data == "feedback")
    dp.callback_query.register(tariff_group_menu, F.data == "tariff_group")
    dp.callback_query.register(payment_group_menu, F.data == "payment_group")
    dp.callback_query.register(tariff_individual_menu, F.data == "tariff_individual")
    dp.callback_query.register(main_menu_handler, F.data == "main_menu")
    dp.callback_query.register(results_back_menu, F.data.startswith("results:"))
    dp.callback_query.register(handle_subscription, F.data.startswith("subscription_"))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
    app = web.Application()
    app.router.add_post("/webhook", handle_webhook)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
